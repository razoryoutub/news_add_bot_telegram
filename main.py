from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import aiohttp
token = '1225831912:AAG60sUGFoeRVePSufgLFM0Xaat176T2t1o'
bot = Bot(token)
dp = Dispatcher(bot)


inline_btn_1 = InlineKeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', callback_data='add_news')
inline_btn_2 = InlineKeyboardButton('–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', callback_data='get_money')
inline_btn_3 = InlineKeyboardButton('6üïï', callback_data='time6')
inline_btn_4 = InlineKeyboardButton('7üïñ', callback_data='time7')
inline_btn_5 = InlineKeyboardButton('8üïó', callback_data='time8')
inline_btn_6 = InlineKeyboardButton('9üïò', callback_data='time9')
inline_btn_7 = InlineKeyboardButton('10üïô', callback_data='time10')
inline_btn_8 = InlineKeyboardButton('11üïö', callback_data='time11')
inline_btn_9 = InlineKeyboardButton('12üïõ', callback_data='time12')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)


@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	if callback_query.data=='add_news':
		await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")


@dp.message_handler(commands=['start', 'help'])
async def handle_start_help(message: types.Message):
	await message.answer('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Ç–æ —Ç–æ –∏ —Ç–æ')

@dp.message_handler(commands=['me'])
async def handle_start_help(message: types.Message):
	await message.answer('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:{0}\n–∏–∑ –Ω–∏—Ö: —ç–∫—Å–∫–ª—é–∑–∏–≤–æ–≤: {1}, –Ω–æ–≤–æ—Å—Ç–µ–π: {2}, –ø–æ—Å—Ç–æ–≤: {3}\n–∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞: {4}'.format(1,2,3,4,5), reply_markup=inline_kb1)


@dp.message_handler( content_types=['document', 'audio', 'photo', 'entities', 'animation', 'video', 'video_note', 'voice'])
async def by_massage(message: types.Message):
	await message.answer(message.caption)
	await message.answer(message.document.file_id)
	

@dp.message_handler( content_types=['text'])
async def by_massage(message: types.Message):
	await message.answer(message.text)


if __name__ == '__main__':	
	executor.start_polling(dp, skip_updates=True)